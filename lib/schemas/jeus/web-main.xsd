<?xml version="1.0" encoding="EUC-KR"?>
<xs:schema
    xmlns="http://www.tmaxsoft.com/xml/ns/jeus"
    targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    version="6.0">

    <xs:include schemaLocation="jeus-common.xsd"/>
    <xs:include schemaLocation="jeus-session.xsd"/>

    <xs:element name="web-container" type="web-containerType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Description]: JEUS Web Container의 설정을 위한 WEBMain.xml의 최상위 레벨 태그.
            ]]></xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="web-containerType">
        <xs:sequence>
            <xs:element minOccurs="0" name="monitoring" type="monitoringType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Web Container의 여러 모니터링 thread의 환경설정을 위한 element이다. 모니터링 thread는 일정 간격으로 여러 pool이나 자원의 상태를 점검하는 thread이다. 각각 체크를 할 때 커넥션 풀 안에 커넥션이 제거되거나, 또는 다른 액션이 취해지는 것이 결정된다. 이 element의 하위 element는 4가지의 서로 다른 pool들의 상태점검을 위한 시간을 필수적으로 설정한다.
                   ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="redirect-stdout" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: System 출력을 Web Container의 출력인 다음 경로의 JEUS_HOME\logs\JeusSystem\[nodename]_[container name]\stdout_[date].log 파일로 재전송하기 위한 결정을 한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="redirect-stderr" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Web Container의 출력내용을 표준에러(stderr)에서 JEUS_HOME\logs\JeusSystem\[nodename]_[container name]\stderr_[date].log파일로 재전송하기 위한 결정을 한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="shutdown-timeout" type="xs:long" default="-1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Web  Container가 종료되기 전에 실행중인 worker thread가 대기하는 시간을 천분의 일초값. 본 옵션은 Container를 down시키기 전에 worker thread들의 작업완료를 강제적으로 기다리게 하는 것이다. 만약 down명령시에 작업을 수행하는worker thread가 없다면 해당 주기를 무시하고 바로 컨테이너를 down시킨다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="context-group" type="context-groupType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 “Context group”이라고 불리는 JEUS 특유의 구조를 구성한다.
                                                Context group들은  모든 Context(Web applications)들을 관장하는 가상 서버 정도로 보면 된다.
                                                이 element 안에 놓이는 설정은 모든 Context에 의해 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="logging" type="loggingType"/>
            <xs:element minOccurs="0" name="properties" type="propertiesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: container-wide 속성을 지정한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="session-config" type="session-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 web container에서 공통적으로 사용 할 세션 설정을 정의한다. context group이나 context별로 이 설정을 override할수 있으며, 우선순위는 context, context group, web container이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="session-server" type="session-serverType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 JEUS 노드 클러스터링 환경이 아닐때에도, 웹컨테이너에서 중앙 세션 서버를 사용하고자 할 때 설정한다.  
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="version" type="jeus-versionType" use="optional" default="5.0"/>
    </xs:complexType>

    <xs:complexType name="session-serverType">
        <xs:sequence>
            <xs:element name="primary-server" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS 노드 클러스터링 환경이 아닌 곳에서, 중앙 세션 서버를 사용하고자 할때 주 세션 서버 역할을 하는 곳의 JEUS 노드 이름을 설정한다. 이 노드에 대한 물리적인 host 정보는 vhost.properties에 구성되어 있어야 한다.
                        [Value Description]: String값으로 JEUS 노드 이름, ex) johan
                        [Value Type Description]: String
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="backup-server" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS 노드 클러스터링 환경이 아닌 곳에서, 중앙 세션 서버를 사용하고자 할때 백업 세션 서버 역할을 하는 곳의 JEUS 노드 이름을 설정한다. 이 노드에 대한 물리적인 host 정보는 vhost.properties에 구성되어 있어야 한다. 만약 주 세션 서버가 다운된 상태에서 웹 컨테이너는 이 백업 세션 서버로 takeover한다.
                        [Value Description]: String값으로 JEUS 노드 이름, ex) johan
                        [Value Type Description]: String
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connect-timeout" type="xs:long" default="5000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS 매니저에 존재하는 중앙 세션 서버와 웹 컨테이너 서블릿 엔진 사이의 통신에 있어 연결 타임아웃을 설정한다.
                        [Value Description]: milli-second단위로 설정한다. 디폴트로 5초이다.
                        [Value Type Description]: Long
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="read-timeout" type="xs:long" default="20000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS 매니저에 존재하는 중앙 세션 서버와 웹 컨테이너 서블릿 엔진 사이의 통신에 있어 응답 타임아웃을 설정한다.
                        [Value Description]: milli-second단위로 설정한다. 디폴트로 20초이다.
                        [Value Type Description]: Long
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="check-level" type="xs:token" default="set">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                                    [Description]: JEUS 노드 클러스터링 환경이 아닐 경우, 웹컨테이너의 세션객체의 수정이 어느 정도 발생하였을 때 중앙 세션 서버로 세션을 업데이트 할지를 결정한다.
                                    [Value Description]: String값으로 "all", "modified", "set" 중 하나를 선택한다. 디폴트 값으로 "set"이 주어진다.
                                    [Value Type Description]: String
                                    [Defined Value]: [all]: 세션 객체의 수정과 관계없이 항상 세션 서버로 업데이트한다.
                                                     [modified]: 세션 객체의 수정사항을 검사하여 변경시 세션서버로 업데이트한다.
                                                     [set]: 해당 세션의 setAttribute/putValue/removeAttribute/removeValue 함수 호출이 일어난 경우에만 세션서버로 업데이트한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="monitoringType">
        <xs:sequence>
            <xs:element minOccurs="0" name="check-thread-pool" type="xs:long" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 worker thread pool안에 있는 worker thread의 상태를 점검하기 위하여 시간간격을 설정한다.
                                                Worker thread들은 Container로 온 클라이언트의 요청을 처리하는 thread이다.
                                                Worker thread는 worker thread pool안에 존재하며 각 웹서버와의 연결을 위해 존재한다.
                                                점검 간격 시간은 Container안에 있는 모든 worker thread에 적용된다. 시간주기가 되면, 각 thread pool을 점검한다.
                                                만약 어떤 상태에 직면하게 되면(예를 들어 특정 thread에 대해 max idle time이 만기되면) 해당 thread를 제거하기 위한 작업이 수행된다.
                        [Value Description]: 시간간격은 millisecond단위(가장 근접한 초의 반올림이 된다) 가능한 가장 짧은 주기는1000 millisecond이다. (1 초).
                        [Value Type Description]: Integer
                        [Defined Value]: [-1]: thread pool의 점검을 비활성화 한다. 단지 테스트 목적으로만 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="check-class-reload" type="xs:long" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 <auto-reload><enable-reload> element를 사용해서 클래스 리로딩 상태를 점검하기 위한 시간간격을 설정한다.
                                                Check-class-reload를 위한 모니터링 thread는 <check-on-demand> element가 (해당 설정은 jeus-web-dd파일에 있다) true값을 갖는 Context들은 점검하지 않는다.
                        [Value Description]: 시간간격은 millisecond단위(가장 근접한 초의 반올림이 된다) 가능한 가장 짧은 주기는1000 millisecond이다. (1 초).
                        [Value Type Description]: Integer
                        [Defined Value]: [-1]: 클래스 재로딩을 위한 점검을 비활성화 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="check-session" type="xs:long" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 세션의 타임아웃 상태를 얼마나 자주 점검하는지를 설정한다.
                                                세션 타임아웃 상태는 <context-group><session-timeout>element 또는 각 context들의 web.xml에 정의된다.
                                                또한 중앙집중식 세션 서버를 사용하는 경우 Primary Session 서버가 alive상태인지 점검한다.
                                                Primary 세션 서버가 alive상태이고 현재 Servlet Container가 Backup 세션 세버를 사용하고 있다면 Primary 세션 서버에
                                                재 연결을 맺는다.
                        [Value Description]: 시간간격은 millisecond단위(가장 근접한 초의 반올림이 된다) 가능한 가장 짧은 주기는1000 millisecond이다. (1 초).
                        [Value Type Description]: Integer
                        [Defined Value]: [-1]: 세션 타임아웃 점검을 비활성화 한다는 것은 HTTPSession.invalidate()가 발생하기 전까지는 모든 세션은 보존됨을 의미한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="context-groupType">
        <xs:sequence>
            <xs:element name="group-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 Context group내부에서 사용된다.
                        [Value Description]: context group 이름
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="virtual-host" type="virtual-hostType">
                <xs:annotation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="webserver-connection" type="webserver-connectionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 웹 서버와의 커넥션 설정을 구성한다.
                                                이것은 보통 웹 서버가 Web Container의 앞 단에 위치하며 클라이언트의 HTTP요청을 받는 것을 의미한다.
                                                웹 서버는 요청을 분석하고 그것이 Web Container(즉 Servlet에 대한 요청)에 의해 처리를 요구하는지를 결정한다.
                                                Web Container 요청들은 웹 서버로부터 적합한 Web Container로 포워드된다.
                                                이러한 요청들을 받아서 처리하는 Web Container의 컴포넌트를 “listener”라 부른다.
                                                이 element는 그러한 listener를 웹 서버에 연결을 구성하는데 사용된다.
                                                여러 웹서버 listener는 동일 머신에서 유일하고 사용하지 않는<port>를 할당할 수 있는 범위 내에서 구성되어야 한다.
                                                여러 종류의 웹서버에 대해서 그에 맞는 listener의 설정은 <webserver-connection>의 하위 태그인 <xxxxx-listener> element를 이용하여 설정함으로써 간단하게 해결할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="attach-stacktrace-on-error" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS 에서 보내주는 error page에 stacktrace 를 첨부할 지를 설정한다. 이 메시지는 개발 기간 동안에는 유용하지만 운영환경에서는 비활성화 해야 한다.
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: stacktrace 를 첨부한다.
                                         [false]: stacktrace 를 첨부하지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="encoding" type="encodingType">
                <xs:annotation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jsp-engine" type="jsp-engineType">
                <xs:annotation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="logging" type="loggingType">
                <xs:annotation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="response-header" type="response-headerType">
                <xs:annotation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="properties" type="propertiesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: context-group-wide 속성을 지정한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="session-config" type="session-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 해당 context group에서 공통적으로 사용 할 세션 설정을 정의한다. web container나 context별로 이 설정을 override할수 있으며, 우선순위는 context, context group, web container이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="virtual-hostType">
        <xs:sequence>
            <xs:element name="virtual-host-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Virtual Host의 내부 식별이름.
                        [Value Description]: 임의의 유일한 이름.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="host-list" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 각 host-list element는 DNS이름( 예, "www.foo.com") 또는 IP 어드레스를 포함한다.
                                                이 element들 내에 명시된 DNS이름들은 Virtual Host에 알려진다. DNS이름과 IP 주소들은 같은 Context group내에서 유일해야 한다
                                                (같은 Context group안에 두 개의 Virtual Host가 있다면 DNS이름들을 공유해서는 안 된다).
                        [Value Description]: DNS 이름 또는 IP 어드레스.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="properties" type="propertiesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: virtual-host-wide 속성을 지정한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>            
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="webserver-connectionType">
        <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="webtob-listener" type="webtob-listenerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                [Description]: 이 element는 WebtoB 웹 서버를 위해 설정하는 웹 서버 listener이다. 해당 listener의 설정은 다른 listener유형과 약간 다르다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http-listener" type="http-listenerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                [Description]: HTTP listener는 제우스 Web Container의 디폴트 내부 웹 서버를 제공한다.
                                        본 내부 웹 서버는 기본적으로 개발할 때나, 소규모 운영 환경에서만 사용되어야 한다.
                                        대규모 운영환경에서는 WebtoB 또는 Apache 웹 서버를 사용해야 한다.
                                        HTTP  Listener를 설정하면, Web Container는 간단한 HTTP요청을 받을 수 있고 자체에서 요청을 처리할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="tcp-listener" type="tcp-listenerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                [Description]: TCP listener는 HTTP listener처럼 작동하지만 HTTP와는 다른 커스텀 네트워크 프로토콜을 지원한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ajp13-listener" type="ajp13-listenerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                [Description]: AJP 1.3 listener는 Apache mod_jk module을 사용하는 AJP 1.3 protocol을 지원한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="tmax-listener" type="tmax-listenerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                [Description]: 이 element는 Tmax와의 연결을 위해 설정하는 listener이다. Webtob listener의 설정과 유사하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

        </xs:choice>
    </xs:complexType>

    <xs:complexType name="webtob-listenerType">
        <xs:sequence>
        	<xs:element name="listener-id" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 해당 listener를 식별할 유일한 이름이다. 이 이름은 구성파일의 다른 부분들로부터 listener를 언급할 때 사용된다.
                        [Value Description]: 임의의 유일한 이름.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="port" type="nonNegativeLongType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: WebtoB서버에 접속할 포트이다. 이 포트넘버는 WebtoB서버 설정파일의 “JSVPORT”값과 일치해야 한다.
                        [Value Description]: 포트넘버는 0보다 큰 값이어야 하고 WebtoB 설정파일의 JSVPORT값과 동일해야 한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="webtob-ipcbaseport"
        		type="nonNegativeLongType" default="6666">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Webtob와 내부 프로세스간 IPC통신을 하기 위해서 해당 포트를 설정한다. 현재 Windows에서만 지원되며, 환경변수에 WEBTOB_IPCBASEPORT를 설정함으로써 같은 기능을 제공하며, 두 가지가 같이 설정이 된 경우에는 여기에 설정된 Port가 우선순위를 갖는다.
                        [Value Description]: 포트넘버는 0보다 큰 값이어야 한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="output-buffer-size"
        		type="nonNegativeLongType" default="8192">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: out.write()메소드들로부터 출력되는 JSP/Servlet 출력물을 임시 저장하는 출력버퍼의 크기를 설정한다. 이 버퍼가 가득 차면 웹 브라우저로 flush된다.
                        [Value Description]: Byte 단위 버퍼사이즈
                        [Value Type Description]: Integer
                        [Example]: <output-buffer-size>16384</output-buffer-size>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="thread-pool" type="thread-poolType" />
        	<xs:element minOccurs="0" name="postdata-read-timeout"
        		type="nonNegativeLongType" default="30000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 post-data를 읽어올 때 기다리는 최대 시간을 설정한다. request.getInputStream().read()메소드를 통해 수행한다.
                        [Value Description]: Millisecond 시간간격
                        [Value Type Description]: Long
                        [Example]: <postdata-read-timeout>40000</postdata-read-timeout>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="scheme" type="schemeType"
        		default="http">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: javax.servlet.http.HttpServletRequest.getScheme() 메소드 프로토콜 식별자 리턴값을 여기에 설정한다. WebtoB 또는 Apache, 그리고 http-listener에서 SSL기능을 사용할 때 "https"값으로 설정해야 한다 .
                        [Value Description]: http 내지 https
                        [Defined Value]: [http]: 만일 SSL이 사용되지 않으면 해당값을 사용한다.
                                                [https]: http listener와 웹 서버에서 SSL을 사용할 때 해당값을 사용한다.
                        [Example]: <scheme>https</scheme>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="hth-count"
        		type="nonNegativeLongType" default="1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: WebtoB 서버에 지정되어 있는 HTH프로세스 개수를 말한다.
                        [Value Description]: WebtoB 서버의 HTH 프로세스 개수와 동일하게 설정한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="request-prefetch"
        		type="xs:boolean" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: webtob request prefetch기능이다. 이 기능이 
                        true이면 현재 처리하는 webtob request외에 1개의 다음 webtob 
                        request를 미리 받아 request queue에 저장하여 처리 속도를 
                        향상시킬 수 있다. 단, web container가 abnormal하게 down되는 
                        경우 prefetch된 webtob request가 유실될 수 있다.
                        [Value Description]: true or false
                        [Value Type Description]: Boolean
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="disable-pipe"
        		type="xs:boolean" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 만일 WebtoB서버가 listener와 같은 머신에서 실행되면,WebtoB와 listener사이에 보다 효율적인 파이프통신을 선택할 수 있다. 이럴 때 해당 element를 “false”로 설정한다.만일 listener와 WebtoB서버가 서로 다른 머신에서 구동할 때 해당 옵션을 항상 “true”로 설정해야 파이프통신이 비활성화 되고 소켓통신을 한다.
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 소켓통신을 한다.
                                                [false]: 파이프통신을 한다.
                        [Example]: <disable-pipe>true</disable-pipe>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="webtob-address"
        		type="xs:token" default="localhost">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 해당 Listener와 연결되는 WebtoB서버의 IP어드레스를 말한다. Listener가 WebtoB서버의 위치를 찾아 연결하기 때문에 반드시 설정되어야 한다.
                                                이것은 Web Container가 수동적으로 웹 서버로부터 커넥션을 기다리는 다른 유형의 웹 서버와는  차이가 있다.
                        [Value Description]: WebtoB서버의 IP어드레스.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="registration-id"
        		type="xs:token" default="default">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: WebtoB 서버와 연결할 때 사용할 registration ID 이름을 말한다.
                        [Value Description]: Registration ID 이름은 WebtoB설정파일에 *SERVER절 밑에 있는 값과 동일해야 한다.
                        [Example]: <registration-id>MyGroup</registration-id>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="webtob-home"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Web Container와 웹 서버간에 효율적인 파이프통신을 가능하게 하는 WebtoB서버의 홈 디렉토리를 설정한다.해당 값은 WebtoB홈 디렉토리를 포함하고 있는 환경변수 값을 오버라이드한다. 이 element는 동일머신에서 하나 이상의 WebtoB서버가 존재하거나 환경변수에 등록되어 있지 않은 WebtoB와 연동하고자 할 경우 해당 WebtoB  서버가 설치된 경로를 입력하면 된다.
                        [Value Description]: 끝에 경로 분리자가 붙는 절대 디렉토리 경로.(“\” 윈도우,”/” 유닉스).
                        [Example]: <webtob-home>c:\WebtoB\</webtob-home>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="read-timeout"
        		type="nonNegativeLongType" default="0">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: WebtoB 웹서버는 WebtoB설정파일의 "svrchktime"변수에 설정된 간격마다 Web Container에 지속적으로 "ping"을 보낸다. Web Container는 WebtoB가 보낸 "ping"들을 체크하기 위해 이 element에 시간간격을 설정한다.만일 WebtoB ping이 여기서 설정한 시간 간격 내에 감지 되지 않는다면,통신링크는 깨진 걸로 간주되고 reset 된다.따라서 이 element의 값은 보통 "svrchktime"값보다 크게 설정되어야 한다.
                        [Value Description]: millisecond 값. WebtoB설정파일에 "svrchktime"값보다 크게 설정한다.
                        [Defined Value]: [0]: Infinity
                        [Example]:<read-timeout>120000</read-timeout>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="reconnect-timeout"
        		type="xs:int" default="-1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: WebtoB서버와 webtob-listener사이의 커넥션이 작업 동안에 연결이 끊어질 경우도 있다.
                                                이런 경우에 재연결을 시도하게 되는데, 이 element는 재연결의 timeout값으로 사용된다.
                                                만일 최근 모든 끊어진 WebtoB 커넥션이 해당값이 지나도 연결이 되지 않고 WebtoB 백업서버들이 정의되어 있으면
                                                Web Container는 WebtoB 백업서버로 fail-over를 시도한다.
                                                만일 WebtoB 백업서버에도 연결이 실패하면, 그 다음 서버로 계속해서 시도한다.
                                                마지막 WebtoB 백업서버까지 실패하면, 다시 메인 webtob-listener와 연결을 시도한다.
                        [Value Description]: Millisecond 단위 timeout값.
                        [Value Type Description]: Long
                        [Defined Value]: [-1]: 무한한 timeout 주기 (listener는 계속 재연결을 시도할 것이다.)
                                                [0]: 재연결을 시도하지 않는다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" maxOccurs="unbounded"
        		name="webtob-backup" type="webtob-backupType">
        		<xs:annotation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>

        	<xs:element name="connection-type" type="xs:token" minOccurs="0">
				<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: response의 Connection type을 강제로 설정한다. 설정이 없는 경우 request의 Connection을 따라감.
                        [Value Description]: string (keep-alive, close, none)
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="tmax-listenerType">
        <xs:sequence>
        	<xs:element name="listener-id" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 해당 listener를 식별할 유일한 이름이다. 이 이름은 구성파일의 다른 부분들로부터 listener를 언급할 때 사용된다.
                        [Value Description]: 임의의 유일한 이름.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="port" type="nonNegativeLongType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: tmax 서버에 접속할 포트이다.
                        [Value Description]: 포트넘버는 0보다 큰 값이어야 한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="output-buffer-size"
        		type="nonNegativeLongType" default="8192">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: out.write()메소드들로부터 출력되는 JSP/Servlet 출력물을 임시 저장하는 출력버퍼의 크기를 설정한다. 이 버퍼가 가득 차면 웹 브라우저로 flush된다.
                        [Value Description]: Byte 단위 버퍼사이즈
                        [Value Type Description]: Integer
                        [Example]: <output-buffer-size>16384</output-buffer-size>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="thread-pool" type="thread-poolType" />
        	<xs:element minOccurs="0" name="postdata-read-timeout"
        		type="nonNegativeLongType" default="30000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 post-data를 읽어올 때 기다리는 최대 시간을 설정한다. request.getInputStream().read()메소드를 통해 수행한다.
                        [Value Description]: Millisecond 시간간격
                        [Value Type Description]: Long
                        [Example]: <postdata-read-timeout>40000</postdata-read-timeout>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="reconnect-timeout"
        		type="xs:int" default="-1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Tmax와 tmax-listener사이의 커넥션이 작업 동안에 연결이 끊어질 경우도 있다.
                                                이런 경우에 재연결을 시도하게 되는데, 이 element는 재연결의 timeout값으로 사용된다.
                        [Value Description]: Millisecond 단위 timeout값.
                        [Value Type Description]: Long
                        [Defined Value]: [-1]: 무한한 timeout 주기 (listener는 계속 재연결을 시도할 것이다.)
                                                [0]: 재연결을 시도하지 않는다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="tmax-address"
        		type="xs:token" default="localhost">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: tmax server의 IP address를 설정한다.
                        [Value Description]: tmax server의 IP address
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="tmax-version"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 연결하고자 하는 tmax server의 버전이다. 40, 3x의 두 버전을 지원한다.
                        [Value Description]: tmax server 버전
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="server-type"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 연결하고자 하는 tmax server의 종류이다. tms, httpgw 등 특수한 server 일 때 설정한다.
                        [Value Description]: tmax server 종류
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="xaresource-class"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: XAResource 클래스의 이름 Transaction Recovery 기능을 사용하고자 할 때 설정한다.
                        [Value Description]: XAResource 클래스 이름
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="server-group-name" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 연결하고자 하는 tmax server가 포함된 그룹을 의미한다.
                        [Value Description]: tmax server group 이름
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="server-name" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 연결하고자 하는 tmax server의 이름이다.
                        [Value Description]: tmax server 이름
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="tmax-backup-address"
        		type="xs:token" default="localhost">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: backup으로 사용될 Tmax server의 IP address이다.
                        [Value Description]: tmax server의 IP address
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="tmax-backup-port"
        		type="nonNegativeLongType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: backup으로 사용될 Tmax server의 port이다.
                        [Value Description]: 포트넘버는 0보다 큰 값이어야 한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="dispatcher-config-class"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: dispatcher 설정 클래스를 지정한다.  이 때 클래스는 반드시 classpath로 설정된 곳에 있어야 하며, 클래스의 이름은 fully qualified class name이어야 한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="use-nio" type="xs:boolean"
        		default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: TmaxListener에서 nio방식의 통신을 사용할지의 여부를 결정한다.
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="selector-count"
        		type="nonNegativeLongType" default="1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: NIO Listener 사용시 Selector 의 개수를 설정한다.
                        [Value Description]: 기본으로 1로 설정되며 connection 수가 많을 경우 이 값을 늘리면 성능이 향상될 수 있다. 
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="connection-type" type="xs:token" minOccurs="0">
				<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: response의 Connection type을 강제로 설정한다. 설정이 없는 경우 request의 Connection을 따라감.
                        [Value Description]: string (keep-alive, close, none)
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="schemeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="http">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Hypertext Transfer Protocol. Web에서 사용되는 프로토콜이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="https">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HTTP 위에 보안성이 첨가된 SSL 연결을 말한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="webtob-backupType">
        <xs:sequence>
            <xs:element name="port" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: WebtoB서버에 접속할 포트. 이 포트넘버는 WebtoB서버 설정파일에 “JSVPORT”값과 일치한다.
                        [Value Description]: 포트넘버는 0보다 큰 값이어야 하고 WebtoB 설정파일의 JSVPORT값과 동일해야 한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="output-buffer-size" type="nonNegativeLongType" default="8192">
                <xs:annotation>
                     <xs:documentation><![CDATA[
                        [Description]: out.write()메소드들로부터 출력되는 JSP/Servlet 출력물을 임시 저장하는 출력버퍼의 크기를 설정한다. 이 버퍼가 가득 차면 웹 브라우저로 flush된다.
                        [Value Description]: Byte 단위 버퍼사이즈
                        [Value Type Description]: Integer
                        [Example]: <output-buffer-size>16384</output-buffer-size>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="thread-pool" type="thread-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Thread pool은 Web Container에 들어오는 요청들을 핸들링 하는 worker thread들을 유지하는데 사용된다.
                                                지정한 포트를 통해 새로운 요청을 받으면 해당 pool에서 새로운 worker thread를 할당받아 요청에 대한 업무를 처리한다.
                                                WebtoB Listener의 경우 thread pool에 대한 설정은 WebtoB서버에 HTH프로세스와 관계가 있음을 주의한다.
                                                그래서 만일 HTH 프로세스 개수가 3개이면 thread pool의 최대 개수는 10개로 설정하면, 실제 생성되는 최대 thread pool의 개수는 30개가 된다.
                                                또한 각 worker thread는 WebtoB 서버와 실제로 지속된 커넥션을 가진다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="postdata-read-timeout" type="nonNegativeLongType" default="30000">
                <xs:annotation>
                     <xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 post-data를 읽어올 때 기다리는 최대 시간을 설정한다. request.getInputStream().read()메소드를 통해 수행한다.
                        [Value Description]: Millisecond 시간간격
                        [Value Type Description]: Long
                        [Example]: <postdata-read-timeout>40000</postdata-read-timeout>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="scheme" type="schemeType" default="http">
                <xs:annotation>
                     <xs:documentation><![CDATA[
                        [Description]: javax.servlet.http.HttpServletRequest.getScheme() 메소드 프로토콜 식별자 리턴값을 여기에 설정한다. WebtoB또는 Apache에서 SSL을 지원하는 http listener를 사용하거나 SSL기능을 사용할 때 “https”값으로 설정해야 한다 .
                        [Value Description]: http 내지 https
                        [Defined Value]: [http]: 만일 SSL이 사용되지 않으면 해당값을 사용한다.
                                                [https]: http listener와 웹 서버에서 SSL을 사용할 때 해당값을 사용한다.
                        [Example]: <scheme>https</scheme>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="hth-count" type="nonNegativeLongType" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: WebtoB 서버에 지정되어 있는 HTH프로세스 개수를 말한다.
                        [Value Description]: WebtoB 서버의 HTH 프로세스 개수와 동일하게 설정한다.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="disable-pipe" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 만일 WebtoB서버가 listener와 같은 머신에서 실행되면,WebtoB와 listener사이에 보다 효율적인 파이프통신을 선택할 수 있다. 이럴 때 해당 element를 “false”로 설정한다.만일 listener와 WebtoB서버가 서로 다른 머신에서 구동할 때 해당 옵션을 항상 “true”로 설정해야 파이프통신이 비활성화 되고 소켓통신을 한다.
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 소켓통신을 한다.
                                                [false]: 파이프통신을 한다.
                        [Example]: <disable-pipe>true</disable-pipe>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="webtob-address" type="xs:token" default="localhost">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당  listener와 연결되는 WebtoB서버의 IP어드레스를 말한다. Listener가 WebtoB서버의 위치를 찾아 연결하기 때문에 반드시 설정되어야 한다.
                                                이것은 Web Container가 수동적으로 웹 서버로부터 커넥션을 기다리는 다른 유형의 웹 서버와는 차이가 있다.
                        [Value Description]: 백업으로 수행될WebtoB서버의 IP어드레스.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="registration-id" type="xs:token" default="default">
                <xs:annotation>
                     <xs:documentation><![CDATA[
                        [Description]: WebtoB 서버와 연결할 때 사용할 registration ID 이름을 말한다.
                        [Value Description]: Registration ID 이름은 WebtoB설정파일에 *SERVER절 밑에 있는 값과 동일해야 한다.
                        [Example]: <registration-id>MyGroup</registration-id>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="webtob-home" type="xs:token">
                <xs:annotation>
                     <xs:documentation><![CDATA[
                        [Description]: Web Container와 웹 서버간에 효율적인 파이프통신을 가능하게 하는 WebtoB서버의 홈 디렉토리를 설정한다.해당 값은 WebtoB홈 디렉토리를 포함하고 있는 환경변수 값을 오버라이드한다. 이 element는 동일머신에서 하나 이상의 WebtoB서버가 존재하거나 환경변수에 등록되어 있지 않은 WebtoB와 연동하고자 할 경우 해당 WebtoB  서버가 설치된 경로를 입력하면 된다.
                        [Value Description]: 끝에 경로 분리자가 붙는 절대 디렉토리 경로.(“\” 윈도우,”/” 유닉스).
                        [Example]: <webtob-home>c:\WebtoB\</webtob-home>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="read-timeout" type="nonNegativeLongType" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: WebtoB 웹서버는 WebtoB설정파일의 "svrchktime"변수에 설정된 간격마다 Web Container에 지속적으로 "ping"을 보낸다. Web Container는 WebtoB가 보낸 "ping"들을 체크하기 위해 이 element에 시간간격을 설정한다.만일 WebtoB ping이 여기서 설정한 시간 간격 내에 감지 되지 않는다면,통신링크는 깨진 걸로 간주되고 reset 된다.따라서 이 element의 값은 보통 "svrchktime"값보다 크게 설정되어야 한다.
                        [Value Description]: millisecond 값. WebtoB설정파일에 "svrchktime"값보다 크게 설정한다.
                        [Defined Value]: [0]:  Infinity
                        [Example]:<read-timeout>120000</read-timeout>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="reconnect-timeout" type="xs:int" default="-1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: WebtoB서버와 webtob-listener사이의 커넥션이 작업 동안에 연결이 끊어질 경우도 있다.
                                                이런 경우에 재연결을 시도하게 되는데, 이 element는 재연결의 timeout값으로 사용된다.
                                                만일 최근 모든 끊어진 WebtoB 커넥션이 해당값이 지나도 연결이 되지 않고 WebtoB 백업서버들이 정의되어 있으면
                                                Web Container는 WebtoB 백업서버로 fail-over를 시도한다.
                                                만일 WebtoB 백업서버에도 연결이 실패하면, 그 다음 서버로 계속해서 시도한다.
                                                마지막 WebtoB 백업서버까지 실패하면, 다시 메인 webtob-listener와 연결을 시도한다.
                        [Value Description]: Millisecond 단위 timeout값.
                        [Value Type Description]: Long
                        [Defined Value]: [-1]: 무한한 timeout 주기 (listener는 계속 재연결을 시도한다.)
                                                [0]: 재연결을 시도 되지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ajp13-listenerType">
        <xs:sequence>
        	<xs:element name="listener-id" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 해당 listener를 식별할 유일한 이름을 말한다. 이 이름은 구성파일의 다른 부분들로부터 listener를 언급할 때 사용된다.
                        [Value Description]: 임의의 유일한 이름.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="ip" type="xs:token" minOccurs="0">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 요청을 받는 IP Address 를 지정한다. 한 머신에 두 개 이상의 IP Address 가 존재할 때 설정한다.
                        [Value Description]: xxx.xxx.xxx.xxx 의 형태
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="port" type="nonNegativeLongType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 포트는 웹 서버로부터 요청을 받을 때 사용된다.
                                                이 포트는 앞에서 설명한 jeus-apache.conf 파일의  ApJServDefaultPort 값과 동일해야 한다.
                        [Value Description]:  0보다 큰 포트값
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="output-buffer-size"
        		type="nonNegativeLongType" default="8192">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: out.write()메소드들로부터 출력되는 JSP/Servlet 출력물을 임시 저장하는 출력버퍼의 크기를 설정한다. 이 버퍼가 가득 차면 웹 브라우저로 flush된다.
                        [Value Description]: Byte 단위 버퍼사이즈
                        [Value Type Description]: Integer
                        [Example]: <output-buffer-size>16384</output-buffer-size>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="thread-pool" type="thread-poolType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Thread pool은 Web Container에 들어오는 요청들을 핸들링 하는 worker thread들을 유지하는데 사용된다.
                                                지정한 포트를 통해 새로운 요청을 받으면 해당 pool에서 새로운 worker thread를 할당받아 요청에 대한 업무를 처리한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="read-timeout"
        		type="nonNegativeLongType" default="300000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버로부터 equest를 읽어 올때 기다리는 최대의 시간을 설정한다. 이 시간 동안 요청이 없으면 웹서버와의 연결을 끊는다. 
                  ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="postdata-read-timeout"
        		type="nonNegativeLongType" default="30000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 post-data를 읽어올 때 기다리는 최대 시간을 설정한다. request.getInputStream().read()메소드를 통해 수행한다.
                        [Value Description]: Millisecond 시간간격
                        [Value Type Description]: Long
                        [Example]: <postdata-read-timeout>40000</postdata-read-timeout>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="scheme" type="schemeType"
        		default="http">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: javax.servlet.http.HttpServletRequest.getScheme() 메소드 프로토콜 식별자 리턴값을 여기에 설정한다. WebtoB또는 Apache에서 SSL을 지원하는 http listener를 사용하거나 SSL기능을 사용할 때 “https”값으로 설정해야 한다 .
                        [Value Description]: http 내지 https
                        [Defined Value]: [http]: 만일 SSL이 사용되지 않으면 해당값을 사용한다.
                                                [https]: http listener와 웹 서버에서 SSL을 사용할 때 해당값을 사용한다.
                        [Example]: <scheme>https</scheme>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="back-log"
        		type="nonNegativeLongType" default="50">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 소켓의 backlog값을 설정한다(생성자 “java.net.ServerSocket(int port,int backlog)에서 소켓 요청을 기다리는 queue의 최대크기).
                        [Value Description]: 0보다 큰 값
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="server-access-control"
        		type="xs:boolean" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 서버 접근 제어를 활성화 또는 비활성화 한다.만일 본 옵션이 활성화되면 허용된 서버(<allowed-server> element에서 지정된)만 이 listener에 접속할 수 있다.                        [Value Description]: Millisecond 시간간격
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 서버접근제어를 활성화 한다.
                                                [false] : 서버접근제어를 비활성화 한다.
                        [Example]: <server-access-control>true</server-access-control>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" maxOccurs="unbounded"
        		name="allowed-server" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 각 <allowed-server> element는 해당 listener에 접속하려는 하나의 서버 IP어드레스를 지정한다. 이 element들은 <server-access-control> element의 값이 true일때만 사용된다. 이 element에 포함이 안되어 있는 서버로부터 온 모든 요청들은 거절된다.
                        [Value Description]: 본 listener에 연결이 허용되는 서버의 IP어드레스
                        [Example]: <allowed-server>127.0.0.1</allowed-server>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="connection-type" type="xs:token" minOccurs="0">
				<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: response의 Connection type을 강제로 설정한다. 설정이 없는 경우 request의 Connection을 따라감.
                        [Value Description]: string (keep-alive, close, none)
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="http-listenerType">
        <xs:sequence>
        	<xs:element name="listener-id" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 해당 listener를 식별할 유일한 이름을 말한다. 이 이름은 구성파일의 다른 부분들로부터 해당 listener를 언급할 때 사용된다.
                        [Value Description]: 임의의 유일한 이름.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="ip" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: HTTP 요청을 받는 IP Address 를 지정한다. 한 머신에 두 개 이상의 IP Address 가 존재할 때 설정한다.
                        [Value Description]: xxx.xxx.xxx.xxx 의 형태
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="port" type="nonNegativeLongType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 클라이언트로부터 HTTP요청을 받는데 사용되는 포트. IANA(www.iana.org)에 따르면 HTTP포트는 80에 할당된다.  
                        [Value Description]: 0 이상의 Port 수.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="output-buffer-size"
        		type="nonNegativeLongType" default="8192">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: out.write()메소드들로부터 출력되는 JSP/Servlet 출력물을 임시 저장하는 출력버퍼의 크기를 설정한다. 이 버퍼가 가득 차면 웹 브라우저로 flush된다.
                        [Value Description]: Byte 단위 버퍼사이즈
                        [Value Type Description]: Integer
                        [Example]: <output-buffer-size>16384</output-buffer-size>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="thread-pool" type="thread-poolType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Thread pool은 Web Container에 들어오는 요청들을 핸들링 하는 worker thread들을 유지하는데 사용된다.
                                                지정한 포트를 통해 새로운 요청을 받으면 해당 pool에서 새로운 worker thread를 할당받아 요청에 대한 업무를 처리한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="read-timeout"
        		type="nonNegativeLongType" default="300000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 request를 읽어 올때 기다리는 최대의 시간을 설정한다. 만약 keep-alive 알고리즘을 사용한다면(HTTP version 1.1) 이 read-timeout설정 값이 0이 아닐경우 thread의 상황에 따라 재조절 될 수 있다.
                  ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="postdata-read-timeout"
        		type="nonNegativeLongType" default="30000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 post-data를 읽어올 때 기다리는 최대 시간을 설정한다. request.getInputStream().read()메소드를 통해 수행한다.
                        [Value Description]: Millisecond 시간간격
                        [Value Type Description]: Long
                        [Example]: <postdata-read-timeout>40000</postdata-read-timeout>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="max-keep-alive-request"
        		type="xs:int" default="100">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]:  <max-keep-alive-request> element는 해당 listener가 keep-alive를 사용할 시 허용할 수 있는 최대의 request수를 의미한다. 0이하의 값일 경우 request 갯수에 제한이 없음을 의미한다.
                        [Value Description]: Integer
                        [Example]: <max-keep-alive-request>256</max-keep-alive-request>
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="keep-alive"
        		type="xs:boolean" default="true">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]:  <keep-alive> element는 해당 listener의 keep alive algorithm 사용 여부를 나타낸다.
                        [Value Description]: boolean( true or false )
                        [Example]: <keep-alive>true</keep-alive>
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>

        	<xs:element minOccurs="0" name="scheme" type="schemeType"
        		default="http">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: javax.servlet.http.HttpServletRequest.getScheme() 메소드 프로토콜 식별자 리턴값을 여기에 설정한다. WebtoB또는 Apache에서 SSL을 지원하는 http listener를 사용하거나 SSL기능을 사용할 때 “https”값으로 설정해야 한다.
                        [Value Description]: http 내지 https
                        [Defined Value]: [http]: 만일 SSL이 사용되지 않으면 해당값을 사용한다.
                                                [https]: http listener와 웹 서버에서 SSL을 사용할 때 해당값을 사용한다.
                        [Example]: <scheme>https</scheme>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="back-log"
        		type="nonNegativeLongType" default="50">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 소켓의 backlog값을 설정한다(생성자 “java.net.ServerSocket(int port,int backlog)에서 소켓요청을 기다리는 queue의 최대크기).
                        [Value Description]: 0보다 큰 값.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="server-access-control"
        		type="xs:boolean" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 서버 접근 제어를 활성화 또는 비활성화 한다.만일 본 옵션이 활성화되면 허용된 서버(<allowed-server> element에서 지정된)만 이 listener에 접속할 수 있다.                        [Value Description]: Millisecond 시간간격
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 서버접근제어를 활성화 한다.
                                                [false]: 서버접근제어를 비활성화 한다.
                        [Example]: <server-access-control>true</server-access-control>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" maxOccurs="unbounded"
        		name="allowed-server" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 각 <allowed-server> element는 해당 listener에 접속하려는 하나의 서버 IP어드레스를 지정한다. 이 element들은 <server-access-control> element의 값이 true일때만 사용된다. 이 element에 포함이 안되어 있는 서버로부터 온 모든 요청들은 거절된다.
                        [Value Description]: 본 listener에 연결이 허용되는 서버의 IP어드레스
                        [Example]: <allowed-server>127.0.0.1</allowed-server>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="ssl-config"
        		type="ssl-configType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: SSL 통신 지원을 위한 설정을 한다.
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="use-nio" type="xs:boolean"
        		default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Http Listener에서 nio방식의 통신을 사용할지의 여부를 결정한다. persistent connection을 사용할 경우 blocking mode일 경우 pool갯수에 비례하여 성능이 좋아지지만 nio를 사용할 경우 nonblocking mode이기때문에 pool갯수와 크게 상관없이 좋은 성능을 낼 수 있다.
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="selector-count"
        		type="nonNegativeLongType" default="1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: NIO Listener 사용시 Selector 의 개수를 설정한다.
                        [Value Description]: 기본으로 1로 설정되며 connection 수가 많을 경우 이 값을 늘리면 성능이 향상될 수 있다. 
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="connection-type" type="xs:token" minOccurs="0">
				<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: response의 Connection type을 강제로 설정한다. 설정이 없는 경우 request의 Connection을 따라감.
                        [Value Description]: string (keep-alive, close, none)
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="tcp-listenerType">
        <xs:sequence>
        	<xs:element name="listener-id" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 해당 listener를 식별할 유일한 이름을 말한다. 이 이름은 구성파일의 다른 부분들로부터 listener를 언급할 때 사용된다.
                        [Value Description]: 임의의 유일한 이름.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="ip" type="xs:token" minOccurs="0">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 요청을 받는 IP Address 를 지정한다. 한 머신에 두 개 이상의 IP Address 가 존재할 때 설정한다.
                        [Value Description]: xxx.xxx.xxx.xxx 의 형태
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="port" type="nonNegativeLongType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 클라이언트로부터 요청을 받는데 사용되는 포트를 말한다.
                        [Value Description]: 0보다 큰 포트 값.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="output-buffer-size"
        		type="nonNegativeLongType" default="8192">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: out.write()메소드들로부터 출력되는 JSP/Servlet 출력물을 임시 저장하는 출력버퍼의 크기를 설정한다. 이 버퍼가 가득 차면 웹 브라우저로 flush된다.
                        [Value Description]: Byte 단위 버퍼사이즈
                        [Value Type Description]: Integer
                        [Example]: <output-buffer-size>16384</output-buffer-size>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="thread-pool" type="thread-poolType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Thread pool은 Web Container에 들어오는 요청들을 핸들링 하는 worker thread들을 유지하는데 사용된다.
                                                지정한 포트를 통해 새로운 요청을 받으면 해당 pool에서 새로운 worker thread를 할당받아 요청에 대한 업무를 처리한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="postdata-read-timeout"
        		type="nonNegativeLongType" default="30000">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 웹 서버/웹 클라이언트로부터 post-data를 읽어올 때 기다리는 최대 시간을 설정한다. request.getInputStream().read()메소드를 통해 수행한다.
                        [Value Description]: Millisecond 시간간격
                        [Value Type Description]: Long
                        [Example]: <postdata-read-timeout>40000</postdata-read-timeout>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="scheme" type="schemeType"
        		default="http">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: javax.servlet.http.HttpServletRequest.getScheme() 메소드 프로토콜 식별자 리턴값을 여기에 설정한다. WebtoB또는 Apache에서 SSL을 지원하는 http listener를 사용하거나 SSL기능을 사용할 때 “https”값으로 설정해야 한다 .
                        [Value Description]: http 내지 https
                        [Defined Value]: [http]: 만일 SSL이 사용되지 않으면 해당값을 사용한다.
                                                [https]: http listener와 웹 서버에서 SSL을 사용할 때 해당값을 사용한다.
                        [Example]: <scheme>https</scheme>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="back-log"
        		type="nonNegativeLongType" default="50">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 소켓의 backlog값을 설정한다(생성자 “java.net.ServerSocket(int port,int backlog)에서 소켓 요청을 기다리는 queue의 최대크기).
                        [Value Description]: 0보다 큰 값
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="ssl-config"
        		type="ssl-configType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: SSL 통신 지원을 위한 설정을 한다.
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="server-access-control"
        		type="xs:boolean" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 서버 접근 제어를 활성화 또는 비활성화 한다.만일 본 옵션이 활성화되면 허용된 서버(<allowed-server> element에서 지정된)만 이 listener에 접속할 수 있다.                        [Value Description]: Millisecond 시간간격
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 서버접근제어를 활성화 한다.
                                                [false]: 서버접근제어를 비활성화 한다.
                        [Example]: <server-access-control>true</server-access-control>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" maxOccurs="unbounded"
        		name="allowed-server" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 각 <allowed-server> element는 해당 listener에 접속하려는 하나의 서버 IP어드레스를 지정한다. 이 element들은 <server-access-control> element의 값이 true일때만 사용된다. 이 element에 포함이 안되어 있는 서버로부터 온 모든 요청들은 거절된다.
                        [Value Description]: 본 listener에 연결이 허용되는 서버의 IP어드레스
                        [Example]: <allowed-server>127.0.0.1</allowed-server>
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="dispatcher-config-class"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: dispatcher 설정 클래스를 지정한다.  이 때 클래스는 반드시 classpath로 설정된 곳에 있어야 하며, 클래스의 이름은 fully qualified class name이어야 한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="connection-handshaker-class"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: handshaker 클래스를 지정한다. 클래스는 반드시 classpath로 설정된 곳에 있어야 하며, 클래스의 이름은 fully qualified class name이어야 한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="use-nio" type="xs:boolean"
        		default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: TCP Listener에서 nio방식의 통신을 사용할지의 여부를 결정한다. persistent connection을 사용할 경우 blocking mode일 경우 pool갯수에 비례하여 성능이 좋아지지만 nio를 사용할 경우 nonblocking mode이기때문에 pool갯수와 크게 상관없이 좋은 성능을 낼 수 있다.
                    ]]></xs:documentation>
        			<xs:appinfo>
        				<metadata>
        					<element-level>ADVANCED</element-level>
        				</metadata>
        			</xs:appinfo>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="selector-count"
        		type="nonNegativeLongType" default="1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: NIO Listener 사용시 Selector 의 개수를 설정한다.
                        [Value Description]: 기본으로 1로 설정되며 connection 수가 많을 경우 이 값을 늘리면 성능이 향상될 수 있다. 
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="connection-listener-class"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Connection Listener 클래스를 지정한다. Connection Listener 는 NIO를 사용하는 경우만 적용된다. 클래스는 반드시 classpath로 설정된 곳에 있어야 하며, 클래스의 이름은 fully qualified class name이어야 한다.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="connection-type" type="xs:token" minOccurs="0">
				<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: response의 Connection type을 강제로 설정한다. 설정이 없는 경우 request의 Connection을 따라감.
                        [Value Description]: string (keep-alive, close, none)
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ssl-configType">
        <xs:sequence>
            <xs:element minOccurs="0" name="enable-secure" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: SSL(Secure Socket Layer) 통신 지원 여부를 결정한다.
                        [Value Description]: true이면 아래 설정된 값에 따라 SSL통신을 지원하고,
                                             false이면 지원하지 않는다.
                                             기본 값은 false 이다.
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:group ref="ssl-config-group"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="thread-poolType">
        <xs:sequence>
            <xs:element minOccurs="0" name="min" type="positiveLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pool에서 worker thread를 유지해야 하는 초기 개수이자 최소 개수를 의미한다.
                        [Value Description]: thread 수.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max" type="positiveLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pool에서 worker thread를 유지해야 하는 최대 개수를 의미한다.
                        [Value Description]: thread 수.
                        [Value Type Description]: Integer
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="step" type="nonNegativeLongType" default="1">
                <xs:annotation>
                      <xs:documentation><![CDATA[
                        [Description]: Pool사이즈가 증가할 때마다 pool에 더해지는 worker thread의 개수를 나타낸다.
                        [Value Description]: 추가되는 thread 수.
                        [Value Type Description]: Integer
                        [Example] : <step>4</step>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max-idle-time" type="xs:int" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pool에서 제거되기 전에 idle상태로 머물러 있는 worker thread의 최대시간을 말한다.
                        [Value Description]: Millisecond 값.
                        [Value Type Description]: Long
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max-wait-queue" type="xs:int" default="4">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 요청들을 다루기 위해 새로운 worker thread를 생성하기 전에 이 element는 request wait queue큐에 넣어질 요청의 최대수를 설정한다
                        [Value Description]: 큐에 넣어질 요청의 최대수
                        [Value Type Description]: Integer
                  ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max-queue" type="xs:int" default="-1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 큐에 대기할 수 있는 최대 요청 값을 설정한다. 이 큐가 꽉 찬 후에 더 많은 요청이 도착하면 busy 페이지가 클라이언트에게 반환된다.
                                       이 element는 Tmax/WebtoB listener에서는 사용되지 않는다. WebtoB listener의 큐 사이즈는 WebtoB 설정 파일에 MaxQCount값으로 구성된다.
                  ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="thread-state-notify" type="thread-state-notifyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 block되는 worker thread를 정의하고, 얼마나 많은 thread가 block될 때 통지될지 정한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="thread-state-notifyType">
        <xs:sequence>
        	<xs:element minOccurs="0" name="max-thread-active-time"
        		type="xs:long" default="-1">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Thread가 block으로 간주되는 시간 값을 설정한다. Thread가 정해진 시간까지 실행되고 있으면 block된 것으로 간주한다.
                        [Value Description]: Millisecond 값. 가장 길게 실행되는 thread의 수행시간에 대략 1.5배정도의 값으로 설정한다. 이 값이 0과 같거나 작으면 이 설정은 무시된다. 디폴트로 -1이 주어진다.
                        [Value Type Description]: Long
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="notify-threshold-ratio"
        		type="xs:double" default="-1.0">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: 경고통지가 e-mail을 이용하여 통지자에게 가기 전까지 존재하는 blocked thread의 비율을 설정한다. 1보다 작은 소숫점의 값을 입력 한다.
                        [Value Description]: 총 worker thread중에서의 blocked thread 비율. 이 값이 0과 같거나 작으면 이 설정은 무시된다. 디폴트로 -1이 주어진다.
                        [Value Type Description]: Double
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="restart-threshold-ratio"
        		type="xs:double" default="-1.0">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Web Container restart가 수행되기 전까지 존재하는 blocked thread의 비율을 설정한다. 1보다 작은 소숫점의 값을 입력 한다.
                        [Value Description]: 총 worker thread중에서의 blocked thread 비율. 이 값이 0과 같거나 작으면 이 설정은 무시된다. 디폴트로 -1이 주어진다.
                        [Value Type Description]: Double
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="notify-subject"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Notify-threshold가 초과될 때 보내지는 e-mail의 제목을 설정한다.
                        [Value Description]: 수신자(관리자)가 해당 e-mail에 대해 어떤 내용인지 바로 알아볼 수 있는 메시지.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="restart-subject"
        		type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: Restart-threshold 가 초과될 때 보내질 e-mail의 제목을 설정한다.
                        [Value Description]: 수신자(관리자)가 해당 e-mail에 대해 어떤 내용인지 바로 알아볼 수 있는 메시지.
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="active-timeout-notification" type="xs:boolean" minOccurs="0" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
                        [Description]: active timeout 상태인 thread 정보의 email notification 유무
                    ]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element name="thread-interrupt-execution" type="xs:boolean" minOccurs="0" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
        				[Description]: active timeout이 발생한 thread에 대한 interrupt 발생 유무
        			]]></xs:documentation>
        		</xs:annotation>        	
        	</xs:element>
        	<xs:element name="restart-engine-execution"	type="xs:boolean" minOccurs="0" default="false">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
        				[Description]: restart threshold를 넘었을 경우 engine restart 유무
        			]]></xs:documentation>
        		</xs:annotation>        	
        	</xs:element>        	
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="encodingType">
        <xs:sequence>
            <xs:element minOccurs="0" name="request-url-encoding" type="encodingSubType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 여 element는 HTTP 요청의 첫번째 line 에 적용할 인코딩을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="request-encoding" type="encodingSubType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 웹 브라우저로부터 수신된 요청들에 적용할 인코딩을 지정한다. 이 인코딩은 HTTP byte array를(query strings, cookies, post데이터를 포함) Web Container 내부의 java.lang.String객체로 바꿀 때 적용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="response-encoding" type="encodingSubType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 PrintWriter.println()을 byte array로 변환할 때 사용되며, 그리고  HTTP헤더 “Content-type:text/html:charset=XXX”의 “XXX” 부분을 설정해서, Web Container의 응답 인코딩을 결정할 때 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="loggingType">
        <xs:sequence>
            <xs:element minOccurs="0" name="user-log" type="user-logType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 프로그래머가 ServletContext.log()메소드 사용을 통해 정의된 메시지의 핸들링을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="access-log" type="access-logType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 Container의 클라이언트의 요청 로그의 핸들링을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="targetType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="stdout">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 출력로그데이터를 표준 출력 스트림에 출력한다.(보통 콘솔)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="file">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 로깅 데이터를 디폴트 error.log파일이나 <file-name>element에 지정한 파일로 출력을 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="levelType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="fatal">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 단지 가장 중대한 메시지만 기록된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="notice">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 보다 덜 중대한 메시지가 “fatal”메시지에 덧붙어 기록된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="information">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 중대하지 않은 메시지가 “notice”와 “fatal”메시지에 덧붙어 기록된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="debug">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 디버거성 메시지가 기록된다.(이전 세가지 메시지 유형을 포함한다).디버깅 목적으로 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="test">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:
                        [Hidden]: true
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="access-logType">
        <xs:complexContent>
            <xs:extension base="system-loggingType">
        <xs:sequence>
            <xs:element minOccurs="0" name="enable" type="xs:boolean" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 엑세스 로깅 기능의 사용 여부를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="enable-analysis" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 엑세스 로깅 분석 여부를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="format" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: time-stamp를 위한 포맷을 설정한다. 이 설정은 엑세스 로그에서만 사용한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
             <xs:element minOccurs="0" name="exclude-ext" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: access-log를 남기지 않는 확장자를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="response-headerType">
        <xs:sequence>
            <xs:element minOccurs="0" name="custom-header" type="custom-headerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 element는 HTTP 응답 메시지에 포함하기 위하여 커스텀 필드들을 정의한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="custom-headerType">
        <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="header-field" type="header-fieldType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 본 Context group의 모든 HTTP 응답들에 포함하는 필드이름과 값.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="header-fieldType">
        <xs:sequence>
            <xs:element name="field-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HTTP 응답 필드 이름.
                        [Value Description]: 필드 명
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="field-value" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 필드를 위해 사용하는 값.
                        [Value Description]: 값.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
