<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE component-specification PUBLIC
  "-//Apache Software Foundation//Tapestry Specification 4.0//EN" 
  "http://tapestry.apache.org/dtd/Tapestry_4_0.dtd">

<component-specification class="jeus.tool.webadmin.component.TargetExplorer2" allow-body="no" allow-informal-parameters="yes">
    <parameter name="model" required="yes"/>
    <parameter name="selectionModel" required="yes"/>

    <parameter name="label"/>
	<parameter name="noTargetMessage"/>

    <parameter name="useOption" default-value="false"/>
    <parameter name="optionLabel" default-value="'Option'"/>
    <parameter name="optionLabel2" default-value="'Option'"/>
    
    <component id="option_label" type="Insert">
        <binding name="value" value="optionLabel"/>
    </component>

    <component id="option_label2" type="Insert">
        <binding name="value" value="optionLabel2"/>
    </component>

    <component id="condOption" type="If">
        <binding name="condition" value="useOption"/>
        <binding name="renderTag" value="false"/>
    </component>

    <component id="allCheck_label" type="Insert">
        <binding name="value" value="message:TargetExplorer.all_check.label"/>
    </component>

    <component id="allCheck" type="Checkbox">
        <binding name="value" value="selectionModel.allTargets"/>
    </component>

    <component id="eachNode" type="For">
        <binding name="source" value="model.nodeNames"/>
        <binding name="value" value="nodeName"/>
        <binding name="index" value="ni"/>
    </component>

    <component id="condHasNext" type="If">
        <binding name="condition" value="hasNext"/>
        <binding name="renderTag" value="false"/>
    </component>

    <component id="condHasTargets" type="If">
        <binding  name="condition" value="model.nodeNames != null and model.nodeNames.length > 0"/>
    </component>

    <component id="nodeName" type="Insert">
        <binding name="value" value="nodeName"/>
    </component>

    <component id="nodeCheck" type="Checkbox">
        <binding name="value" value="selectionModel.nodeSelected"/>
    </component>

    <component id="eachContainer" type="For">
        <binding name="source" value="model.getContainerNames(nodeName)"/>
        <binding name="value" value="containerName"/>
    </component>

    <component id="containerName" type="Insert">
        <binding name="value" value="containerName"/>
        <binding name="renderTag" value="true"/>
        <binding name="class" value="literal:target_explorer_containername"/>
    </component>

    <component id="containerCheck" type="Checkbox">
        <binding name="value" value="selectionModel.containerSelected"/>
    </component>

    <component id="containerOption" type="PropertySelection">
        <binding name="value" value="selectionModel.containerOption"/>
        <binding name="model" value="contextGroupModel"/>
    </component>
    
    <component id="eachContextGroup" type="For">
    	<binding name="source" value="model.getContextGroupNames(containerName)"/>
    	<binding name="value" value="contextGroupName"/>
    	<binding name="renderTag" value="false"/>
    </component>

    <component id="virtualHostSelect" type="Select">
        <binding name="multiple" value="true"/>
    </component>

    <component id="eachVirtualHost" type="For">
        <binding name="source" value="model.getVirtualHostNames(contextGroupName)"/>
        <binding name="value" value="virtualHostName"/>
        <binding name="index" value="vi"/>
        <binding name="renderTag" value="false"/>
    </component>

    <component id="virtualHostOption" type="Option">
        <binding name="selected" value="selectionModel.virtualHostSelected"/>
        <binding name="label" value="virtualHostName"/>
    </component>

    <property name="nodeName"/>
    <property name="containerName"/>
    <property name="contextGroupName"/>
    <property name="ni"/>
    <property name="vi"/>
</component-specification>